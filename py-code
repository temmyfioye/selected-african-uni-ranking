#import required packages
import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt

#read csv file. This CSV file is available on Kaggle
df = pd.read_csv("../input/timesData.csv")

df.info() #get basic information about the file

df.head() #get first few records to have an insight into the data

# Create variable with TRUE if year is equal to 2016 as that is the latest year on the list which is interest
yr_2016 = df['year'] == 2016 

#for Nigeria
# Create variable with TRUE if country is Nigeria
Nigeria = df['country'] == "Nigeria"
# Select all cases where the country is Nigeria and year is equal to 2016
Nigeria = df[Nigeria & yr_2016]
Nigeria

#for Ghana
# Create variable with TRUE if country is Ghana
Ghana = df['country'] == "Ghana"
#Select all cases where the country is Ghana and  year is equal to 2016
Ghana = df[Ghana & yr_2016]
Ghana

#for Kenya
# Create variable with TRUE if country is Kenya
Kenya = df['country'] == "Kenya"
# Select all cases where the country is  and  year is equal to 2016
Kenya = df[Kenya & yr_2016]
Kenya

#for Uganda
# Create variable with TRUE if country is Uganda
Uganda = df['country'] == "Uganda"
# Select all cases country is Uganda and  year is equal to 2016
Uganda = df[Uganda & yr_2016]
Uganda

#for South Africa
# Create variable with TRUE if country is South Africa
SA = df['country'] == "South Africa"
# Select all cases where the country is South Africa and  year is equal to 2016
SA = df[SA & yr_2016]
SA

#for Egypt
# Create variable with TRUE if country is Egypt
Egypt = df['country'] == "Egypt"
# Select all cases where the country is Egypt and  year is equal to 2016
Egypt = df[Egypt & yr_2016]
Egypt

#for Morocco
# Create variable with TRUE if country is Morocco
Morocco = df['country'] == "Morocco"
# Select all casess country is Morocco and  year is equal to 2016
Morocco = df[Morocco & yr_2016]
Morocco

#put the different frames together as an array
frames = [Nigeria, Ghana, Kenya, Uganda, SA, Morocco, Egypt]

#concatenate them
result = pd.concat(frames)
result

#columns for visualizations
uni_name = result['university_name']
teaching = result['teaching']
research = result['research']
international_coll =  result['international']
citations =  result['citations']
stud_pop = result['num_students']

stud_num = [x.replace(",", "") for x in stud_pop] #taking out the commas in student population data

#plotting universities vs student population
universities = uni_name.values.tolist() #converting the data frame to a list
y_pos = np.arange(len(universities ))

#first plot-Student Population of Selected African Universities
plt.bar(y_pos, stud_num, align='center', alpha=0.5)
plt.xticks(y_pos, universities, rotation=90)
plt.ylabel('Student Population')
plt.title('Plot 1 - 2016 Student Population of selected African Universities')
plt.show() #show the plot

universities #listing the content of universities

#Plot 2-Group bar charts for Teaching, Research, International Collaborations and citations
# Setting the positions and width for the bars
pos = np.arange(len(universities))
width = 0.2

# Plotting the bars
fig, ax = plt.subplots(figsize=(10,5))
y1 = teaching
y2 = research
y3 = international_coll
y4 = citations
# Create a bar with Teaching data,
# in position pos,
plt.bar(pos,y1, width,  alpha=0.5, color='b', label='Teaching')

# Create a bar with research data,
# in position pos + some width buffer,
plt.bar([p + width for p in pos], y2, width, alpha=0.5, color='r', label='Research')

# Create a bar with international collaborations data,
# in position pos + some width buffer,
plt.bar([p + width*2 for p in pos], y3, width, alpha=0.5, color='g', label='International Collaborations')

# Create a bar with citations data,
# in position pos + some width buffer,
plt.bar([p + width*3 for p in pos], y4, width, alpha=0.5, color='y', label='Citations')

# Set the y axis label
ax.set_ylabel('Ranking Parameters')

# Set the chart's title
ax.set_title('Bar chart for different ranking parameters')

# Set the position of the x ticks
ax.set_xticks([p + 1.5 * width for p in pos])

# Set the labels for the x ticks
ax.set_xticklabels(universities, rotation=90)

# Setting the x-axis and y-axis limits
plt.xlim(min(pos)-width, max(pos)+width*4)
plt.ylim([0, 100] )

# Adding the legend and showing the plot
plt.legend(['Teaching', 'Research', 'International Collaborations', 'Citations'], loc='upper left')
plt.grid()
plt.show()

# pairwise correlation between columns, dropping certain columns
result.drop(['world_rank', 'income', 'total_score', 'year'], axis=1).corr(method='spearman').style.format("{:.2}").background_gradient(cmap=plt.get_cmap('coolwarm'), axis=1)

